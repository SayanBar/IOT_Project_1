
#include <asf.h>
#include "platform.h"
#include "at_ble_api.h"
#include "console_serial.h"
#include "timer_hw.h"
#include "ble_manager.h"
#include "ble_utils.h"
#include "button.h"
#include "startup_template_app.h"
#include <string.h>

struct uart_module uart_instance;
struct dma_resource uart_dma_resource_tx;
struct dma_resource uart_dma_resource_rx;
volatile at_ble_status_t status;
at_ble_handle_t htpt_conn_handle;
volatile bool Timer_Flag = false; 
volatile bool Temp_Notification_Flag = false; 
#define BUFFER_LEN    2
static int8_t string[BUFFER_LEN]; 
int8_t value1,value2;
struct dma_descriptor example_descriptor_tx;
struct dma_descriptor example_descriptor_rx;


void configure_gpio_pins(void)
{
	//! [setup_1]
	struct gpio_config config_gpio_pin;
	//! [setup_1]
	//! [setup_2]
	gpio_get_config_defaults(&config_gpio_pin);
	//! [setup_2]

	//! [setup_3]
	//config_gpio_pin.direction  = GPIO_PIN_DIR_INPUT;
	config_gpio_pin.input_pull = GPIO_PIN_PULL_UP;
	//! [setup_3]
	//! [setup_4]
	//gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin);
	//! [setup_4]

	//! [setup_5]
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
	//! [setup_5]
	//! [setup_6]
	gpio_pin_set_config(LED_0_PIN, &config_gpio_pin);
	//! [setup_6]
}


//! [setup]
//! [transfer_done_tx]
static void transfer_done_tx(struct dma_resource* const resource )
{
	dma_start_transfer_job(&uart_dma_resource_rx);
}
//! [transfer_done_tx]

//! [transfer_done_rx]
static void transfer_done_rx(struct dma_resource* const resource )
{
	dma_start_transfer_job(&uart_dma_resource_rx);
	 value1=string[0];//storing the values of the string on variables
	 value2=string[1];
	 if((int)value1==70 || (int)value2==70)
	 gpio_pin_set_output_level(LED_0_PIN, true);//turning off LED
	 else if((int)value1==78 || (int)value2==78)
	 gpio_pin_set_output_level(LED_0_PIN, false);//turning on LED
}
//! [transfer_done_rx]

//! [config_dma_resource_tx]
static void configure_dma_resource_tx(struct dma_resource *resource)
{
	//! [setup_tx_1]
	struct dma_resource_config config;
	//! [setup_tx_1]

	//! [setup_tx_2]
	dma_get_config_defaults(&config);
	//! [setup_tx_2]

	//! [setup_tx_3]
	config.des.periph = UART0TX_DMA_PERIPHERAL;
	config.des.enable_inc_addr = false;
	config.src.periph = UART0TX_DMA_PERIPHERAL;
	//! [setup_tx_3]

	//! [setup_tx_4]
	dma_allocate(resource, &config);
	//! [setup_tx_4]
}
//! [config_dma_resource_tx]

//! [setup_dma_transfer_tx_descriptor]
static void setup_transfer_descriptor_tx(struct dma_descriptor *descriptor)
{

	//! [setup_tx_5]
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_tx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
	descriptor->read_start_addr = (uint32_t)string;
	descriptor->write_start_addr =
	(uint32_t)(&uart_instance.hw->TRANSMIT_DATA.reg);
	//! [setup_tx_6]
}
//! [setup_dma_transfer_tx_descriptor]

//! [config_dma_resource_rx]
static void configure_dma_resource_rx(struct dma_resource *resource)
{
	//! [setup_rx_1]
	struct dma_resource_config config;
	//! [setup_rx_1]

	//! [setup_rx_2]
	dma_get_config_defaults(&config);
	//! [setup_rx_2]

	//! [setup_rx_3]
	config.src.periph = UART0RX_DMA_PERIPHERAL;
	config.src.enable_inc_addr = false;
	config.src.periph_delay = 1;
	//! [setup_rx_3]

	//! [setup_rx_4]
	dma_allocate(resource, &config);
	//! [setup_rx_4]
}
//! [config_dma_resource_rx]

//! [setup_dma_transfer_rx_descriptor]
static void setup_transfer_descriptor_rx(struct dma_descriptor *descriptor)
{
	//! [setup_rx_5]
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_rx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
	descriptor->read_start_addr =
	(uint32_t)(&uart_instance.hw->RECEIVE_DATA.reg);
	descriptor->write_start_addr = (uint32_t)string;
	//! [setup_tx_6]
}
//! [setup_dma_transfer_rx_descriptor]

//! [setup_usart]
static void configure_usart(void)
{
	//! [setup_config]
	struct uart_config config_uart;
	//! [setup_config]

	//! [setup_config_defaults]
	uart_get_config_defaults(&config_uart);
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_uart.baud_rate = 9600;
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
	//! [setup_change_config]

	//! [setup_set_config]
	while (uart_init(&uart_instance,
	EDBG_CDC_MODULE, &config_uart) != STATUS_OK) {
	}
	//! [setup_set_config]

	//! [enable_interrupt]
	uart_enable_transmit_dma(&uart_instance);
	uart_enable_receive_dma(&uart_instance);
	//! [enable_interrupt]
}
//! [setup_usart]

//! [setup_callback]
static void configure_dma_callback(void)
{
	//! [setup_callback_register]
	dma_register_callback(&uart_dma_resource_tx, transfer_done_tx, DMA_CALLBACK_TRANSFER_DONE);
	dma_register_callback(&uart_dma_resource_rx, transfer_done_rx, DMA_CALLBACK_TRANSFER_DONE);
	//! [setup_callback_register]

	//! [setup_enable_callback]
	dma_enable_callback(&uart_dma_resource_tx, DMA_CALLBACK_TRANSFER_DONE);
	dma_enable_callback(&uart_dma_resource_rx, DMA_CALLBACK_TRANSFER_DONE);
	//! [setup_enable_callback]

	//! [enable_inic]
	NVIC_EnableIRQ(PROV_DMA_CTRL0_IRQn);
	//! [enable_inic]
}
 
 /* Timer callback */
 static void timer_callback_handler(void)
 {
	 /* Stop timer */
	 hw_timer_stop();
	 /* Set timer Alarm flag */
	 Timer_Flag = true;
	 /* Restart Timer */
	 hw_timer_start(10);
 }
 
 static at_ble_status_t  app_htpt_cfg_indntf_ind_handler(void *params)
 {
	 at_ble_htpt_cfg_indntf_ind_t htpt_cfg_indntf_ind_params;
	 memcpy((uint8_t *)&htpt_cfg_indntf_ind_params, params,
	 sizeof(at_ble_htpt_cfg_indntf_ind_t));
	 if (htpt_cfg_indntf_ind_params.ntf_ind_cfg == 0x03) {
		 printf("Started HTP Temperature Notification");
		 Temp_Notification_Flag = true;
	 }
	 else {
		 printf("HTP Temperature Notification Stopped");
		 Temp_Notification_Flag = false;
	 }
	 return AT_BLE_SUCCESS;
 }
 
 static void htp_init (void)
 {
	 printf("\nAssignment 4.1: Init Health temperature service ");
	 /* Create htp service in GATT database*/
	 status = at_ble_htpt_create_db(
	 HTPT_TEMP_TYPE_CHAR_SUP,
	 HTP_TYPE_ARMPIT,
	 1,
	 30,
	 1,
	 HTPT_AUTH,
	 &htpt_conn_handle);
	 if (status != AT_BLE_SUCCESS){
		 printf("HTP Data Base creation failed");
		 while(true);
	 }
 }

static void ble_advertise (void)
{
	printf("\nAssignment 2.1 : Start Advertising");
	status = ble_advertisement_data_set();
	if(status != AT_BLE_SUCCESS)
	{
		printf("\n\r## Advertisement data set failed : error %x",status);
		while(1);
	}
	/* Start of advertisement */
	status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED,\
	AT_BLE_ADV_GEN_DISCOVERABLE,\
	NULL,\
	AT_BLE_ADV_FP_ANY,\
	1000,\
	655,\
	0);
	if(status != AT_BLE_SUCCESS)
	{
		printf("\n\r## Advertisement data set failed : error %x",status);
		while(1);
	}
}
 /* Callback registered for AT_BLE_CONNECTED event*/
 static at_ble_status_t ble_paired_cb (void *param)
 {
	 at_ble_pair_done_t *pair_params = param;
	 printf("\nAssignment 3.2: Application paired ");
	 /* Enable the HTP Profile */
	 printf("\nAssignment 4.1: enable health temperature service ");
	 status = at_ble_htpt_enable(pair_params->handle,
	 HTPT_CFG_INTERM_MEAS_NTF);
	 if(status != AT_BLE_SUCCESS){
		 printf("*** Failure in HTP Profile Enable");
		 while(true);
	 }

	 ALL_UNUSED(param);
	 return AT_BLE_SUCCESS;
 }
 
 /* Callback registered for AT_BLE_DISCONNECTED event */
 static at_ble_status_t ble_disconnected_cb (void *param)
 {
	 printf("\nAssignment 3.2: Application disconnected ");
	 ble_advertise();
	 ALL_UNUSED(param);return AT_BLE_SUCCESS;
 }

 static const ble_event_callback_t app_htpt_handle[] = {
	 NULL, // AT_BLE_HTPT_CREATE_DB_CFM
	 NULL, // AT_BLE_HTPT_ERROR_IND
	 NULL, // AT_BLE_HTPT_DISABLE_IND
	 NULL, // AT_BLE_HTPT_TEMP_SEND_CFM
	 NULL, // AT_BLE_HTPT_MEAS_INTV_CHG_IND
	 app_htpt_cfg_indntf_ind_handler, // AT_BLE_HTPT_CFG_INDNTF_IND
	 NULL, // AT_BLE_HTPT_ENABLE_RSP
	 NULL, // AT_BLE_HTPT_MEAS_INTV_UPD_RSP
	 NULL // AT_BLE_HTPT_MEAS_INTV_CHG_REQ
 };
 
 static const ble_event_callback_t app_gap_cb[] = {
	 NULL, // AT_BLE_UNDEFINED_EVENT
	 NULL, // AT_BLE_SCAN_INFO
	 NULL, // AT_BLE_SCAN_REPORT
	 NULL, // AT_BLE_ADV_REPORT
	 NULL, // AT_BLE_RAND_ADDR_CHANGED
	 NULL, // AT_BLE_CONNECTED
	 ble_disconnected_cb, // AT_BLE_DISCONNECTED
	 NULL, // AT_BLE_CONN_PARAM_UPDATE_DONE
	 NULL, // AT_BLE_CONN_PARAM_UPDATE_REQUEST
	 ble_paired_cb, // AT_BLE_PAIR_DONE
	 NULL, // AT_BLE_PAIR_REQUEST
	 NULL, // AT_BLE_SLAVE_SEC_REQUEST
	 NULL, // AT_BLE_PAIR_KEY_REQUEST
	 NULL, // AT_BLE_ENCRYPTION_REQUEST
	 NULL, // AT_BLE_ENCRYPTION_STATUS_CHANGED
	 NULL, // AT_BLE_RESOLV_RAND_ADDR_STATUS
	 NULL, // AT_BLE_SIGN_COUNTERS_IND
	 NULL, // AT_BLE_PEER_ATT_INFO_IND
	 NULL  // AT_BLE_CON_CHANNEL_MAP_IND
 };
 
 
 /* Register GAP callbacks at BLE manager level*/
 static void register_ble_callbacks (void)
 {
	 /* Register GAP Callbacks */
	 printf("\nAssignment 3.2: Register bluetooth events callbacks");
	 status = ble_mgr_events_callback_handler(REGISTER_CALL_BACK,\
	 BLE_GAP_EVENT_TYPE,app_gap_cb);
	 if (status != true) {
		 printf("\n##Error when Registering SAMB11 gap callbacks");
	 }
	 status = ble_mgr_events_callback_handler(REGISTER_CALL_BACK,\
	 BLE_GATT_HTPT_EVENT_TYPE,app_htpt_handle);
	 if (status != true) {
		 printf("\n##Error when Registering  SAMB11 htpt callbacks");
	 }
 }
 
 

static void htp_temperature_read(void)
{
	float temperature;
	/* Read Temperature Value from IO1 Xplained Pro */
	if(value1!=79 && value2!=79)
	{
	if(value1>value2)
			temperature= (value1)+((value2)/10);
  
	 else
			temperature= (value2)+((value1)/10);
		
	}
	/* Display temperature on com port */
	#ifdef HTPT_FAHRENHEIT
	printf("\nTemperature: %d Fahrenheit", (uint16_t)temperature);
	#else
	printf("\nTemperature: %d Deg Celsius", (uint16_t)temperature);
	#endif
}
 
 /* Sending the temperature value after reading it from IO1 Xplained Pro */
 static void htp_temperature_send(void)
 {
	 at_ble_prf_date_time_t timestamp;
	 float temperature;
	if(value1!=79 && value2!=79)
	{
	if(value1<0 && value2<0)
	{
	if(value1>value2 )
		temperature= (float)(value2)+(float)((float)(value1)/10);//calculating the temperature
	 else
		temperature= (float)(value1)+((float)((float)value2)/10);
		
	}
	else{
		if(value1>value2 )
		temperature= (float)(value1)+(float)(((float)value2)/10);
		else
		temperature= (float)(value2)+(float)((float)(value1)/10);
	}
	}

	 /* Read Temperature Value from IO1 Xplained Pro */
	 #ifdef HTPT_FAHRENHEIT
	 temperature = (((temperature * 9.0)/5.0) + 32.0);
	 #endif
	 /* Read Temperature Value from IO1 Xplained Pro */
	 timestamp.day = 1;
	 timestamp.hour = 9;
	 timestamp.min = 2;
	 timestamp.month = 8;
	 timestamp.sec = 36;
	 timestamp.year = 15;
	 /* Read Temperature Value from IO1 Xplained Pro */
	 if(at_ble_htpt_temp_send(convert_ieee754_ieee11073_float((float)temperature),
	 &timestamp,
	 #ifdef HTPT_FAHRENHEIT
	 (at_ble_htpt_temp_flags)(HTPT_FLAG_FAHRENHEIT | HTPT_FLAG_TYPE),
	 #else
	 (at_ble_htpt_temp_flags)(HTPT_FLAG_CELSIUS | HTPT_FLAG_TYPE),
	 #endif
	 HTP_TYPE_ARMPIT,
	 1
	 ) == AT_BLE_SUCCESS)
	 {
		 #ifdef HTPT_FAHRENHEIT
		 printf("\nTemperature: %d Fahrenheit", (uint16_t)temperature);
		 #else
		 printf("\nTemperature: %d Deg Celsius", (uint16_t)temperature);
		 #endif
	 }
 }
 

int main (void)
{
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
//! [main_1]
platform_driver_init();
acquire_sleep_lock();
/* Initialize serial console */
serial_console_init();
/* Hardware timer */
hw_timer_init();
/* Register the callback */
hw_timer_register_callback(timer_callback_handler);
/* Start timer */
hw_timer_start(1);
printf("\n\rSAMB11 BLE Application");
/* initialize the BLE chip and Set the Device Address */
ble_device_init(NULL);
	//! [setup_init]
	//! [init_system]
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
	//! [init_system]

	//! [setup_usart]
	configure_gpio_pins();
	configure_usart();
	//! [setup_usart]
    
	//! [setup_dma_resource]
	configure_dma_resource_tx(&uart_dma_resource_tx);
	configure_dma_resource_rx(&uart_dma_resource_rx);
	//! [setup_dma_resource]

	//! [setup_transfer_descriptor]
	setup_transfer_descriptor_tx(&example_descriptor_tx);
	setup_transfer_descriptor_rx(&example_descriptor_rx);
	//! [setup_transfer_descriptor]

	//! [add_descriptor_to_resource]
	dma_add_descriptor(&uart_dma_resource_tx, &example_descriptor_tx);
	dma_add_descriptor(&uart_dma_resource_rx, &example_descriptor_rx);
	//! [add_descriptor_to_resource]

	//! [configure_callback]
	configure_dma_callback();
	//! [configure_callback]
	//! [setup_init]

	//! [main]
	//! [main_1]
	dma_start_transfer_job(&uart_dma_resource_rx);
	
	/* Initialize the temperature sensor */
	//at30tse_init();
	/* configure the temperature sensor ADC */
	//at30tse_write_config_register(AT30TSE_CONFIG_RES(AT30TSE_CONFIG_RES_12_bit));
	/* read the temperature from the sensor */
	htp_temperature_read();
	/* Initialize the htp service */
	htp_init();

	/* Register Bluetooth events Callbacks */
	register_ble_callbacks();

   /* Start Advertising process */
    ble_advertise();
    gpio_pin_set_output_level(LED_0_PIN, true);//turning off the LED initially
	while(true) {
		   ble_event_task(655); 
		   if (Timer_Flag & Temp_Notification_Flag)
		   {
			   htp_temperature_send();
		   }
	}
}