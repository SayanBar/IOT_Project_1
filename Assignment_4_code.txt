/**************************************************************************//**
 * @file
 * @brief Empty Project
 * @author Energy Micro AS
 * @version 3.20.2
 ******************************************************************************
 * @section License
 * <b>(C) Copyright 2014 Silicon Labs, http://www.silabs.com</b>
 *******************************************************************************
 *
 * This file is licensed under the Silicon Labs Software License Agreement. See
 * "http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt"
 * for details. Before using this software for any purpose, you must agree to the
 * terms of that agreement.
 *
 ******************************************************************************/

/*Assignment 4
 * Author: Sayan Barman
 *
 * Description :Develop I2C code for the Leopard Gecko as a master on the I2C bus.
 *   The I2C device is the TSL2651 ambient light sensor.
 *   For this assignment, the passive on board ambient light sensor will not be used,
 *    but the active TSL2651 will be used instead.
 *    The LETIMER0 will be used to determine when the TSL2651 should be load power management turned on
 *    and when it should be load power management disabled.
 *
 *
 *   Disclaimer : I would like to give credit to SILICON LABS for the Sleep,blockSleepMode,unblockSleepMode,converttoCelcius routines*/


/*Including header files*/
#include <stdint.h>
#include <stdbool.h>
#include "em_device.h"
#include "em_cmu.h"
#include "em_emu.h"
#include "em_letimer.h"
#include "em_timer.h"
#include "em_gpio.h"
#include "em_chip.h"
#include "em_acmp.h"
#include "dmactrl.h"
#include "em_adc.h"
#include "em_dma.h"
#include "em_int.h"
#include "em_i2c.h"


/***options***/
#define ENERGY_MODE EM2
#define CALIB_ON 1
#define I2C_0_ACMP_1 0
#define DMA_STATUS 1
/****** LETIMER constants*****/
#define LFXOFreq 32768
#define ULFRCOFreq 1000
#define LED_PORT    gpioPortE
#define LED_LIGHT_PIN     2
#define LED_TEMP_PIN     3
#define Period     5
#define ON_DUTY_CYCLE     0.004
/*Pins*/
#define LIGHT_SENSE_PORT    gpioPortC
#define LIGHT_SENSE_PIN     6
#define LIGHT_EXCITE_PORT    gpioPortD
#define LIGHT_EXCITE_PIN     6
#define UF_Count 0x0000

/*Temperature Limits*/
#define lowTempLimit 15
#define highTempLimit 35
/*ACMP inputs*/
#define ACMP_NEG_CHANNEL acmpChannelVDD
#define ACMP_POS_CHANNEL acmpChannel6

/*Slave register addresses*/
#define I2C_CTRL_ADD 0x00
#define I2C_TIMING_ADD 0x01
#define I2C_TLL_ADD 0x02
#define I2C_TLH_ADD 0x03
#define I2C_THL_ADD 0x04
#define I2C_THH_ADD 0x05
#define I2C_INT_ADD 0x06

/*Threshold bytes*/
#define TLL 0x0F
#define TLH 0x00
#define THL 0x00
#define THH 0x08

/*Slave register values*/
#define PERSIST 0x04
#define INTR_FIELD 0x01
#define POWER 0x03
#define TIMING 0x01      //Low gain
#define ADC0_DLOW 0x0C

/*SLeep routine array*/
unsigned int sleep_block_counter[4];

/*Slave addresses and read/write operation values */
#define TSL_addr 0x39
#define Write 0x0
#define Read 0x1

/*Port and Pin COnstants*/
#define Clock_Data_Port gpioPortC
#define Power_Pin  0
#define Interrupt_Pin  1
#define Power_Interrupt_Port  gpioPortD

/*Miscellaneous constants */
#define CMD_Byte 0xC0
#define Word_mode 0xE0
#define INT_PIN_ADD 0x0002
#define SCL_Pin  5
#define SDA_Pin  4

/* ADC DMA Setup Constants*/
#define DMA_CHANNEL_ADC       0
#define ADCSAMPLES                        400
#define ADC_Prescale        975000
volatile uint16_t ramBufferAdcData[ADCSAMPLES];//Buffer size
#define ADCSAMPLESPERSEC              75000
#define ADC0_resolution adcRes12Bit
#define ADC0_reference adcRef1V25
#define ADC0_channel adcSingleInpTemp
#define ADC0_acq_time adcAcqTime1
#define ADC0_rep true
#define ADC0_PRS_SELECTION adcPRSSELCh0

/* Energy mode enum*/
typedef enum{
EM0=0,
EM1=1,
EM2=2,
EM3=3
}sleepstate_enum;

/*Initializing global variables*/
int   LEVEL=2;
float osc=1;
int Buffer_Count;
int LETIMER_Period=1;
/*declarations*/
void ACMP_Setup();
void calib_ultra(void);
void setupDma();
void CMU_Setup();
void LETIMER0_Setup();
void GPIO_Setup();
void TSL2561_Setup();
void setupAdc();
void setupI2C(void);
void sleep();
void blockSleepMode(sleepstate_enum minimumMode);
void unblockSleepMode(sleepstate_enum minimumMode);


/* DMA callback structure */
DMA_CB_TypeDef cb;


uint32_t Sum;//store the sum of all the values of the buffer
float Average;//average of the sum of all values

int Samples_Count;//to count the number of samples in the buffer

/*Function to convert adc Sample to Celcius taken from Silicon Labs*/
float convertToCelsius(float adcSample)
{
  float temp;

  float cal_temp_0 = (float)((DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK)
                             >> _DEVINFO_CAL_TEMP_SHIFT);

  float cal_value_0 = (float)((DEVINFO->ADC0CAL2
                               & _DEVINFO_ADC0CAL2_TEMP1V25_MASK)
                              >> _DEVINFO_ADC0CAL2_TEMP1V25_SHIFT);

  /* Temperature gradient (from datasheet) */
  float t_grad = -6.27;

  temp = (cal_temp_0 - ((cal_value_0 - adcSample)  / t_grad));

  return temp;
}

/*GPIO Handler which is invoked on getting an interrupt from the slave*/
void GPIO_ODD_IRQHandler(void)
{
	INT_Disable();
      GPIO_IntClear(INT_PIN_ADD);

      I2C1->TXDATA=((TSL_addr<<1)|Write);
      I2C1->CMD =I2C_CMD_START;
      while(!(I2C1->IF & I2C_IF_ACK));
      I2C1->IFC = I2C_IFC_ACK;


      I2C1->TXDATA= Word_mode|ADC0_DLOW;
      while(!(I2C1->IF & I2C_IF_ACK));
      I2C1->IFC |= I2C_IFC_ACK;

      I2C1->CMD =I2C_CMD_START;
      I2C1->TXDATA=((TSL_addr<<1)|Read);
      while(!(I2C1->IF & I2C_IF_ACK));
      I2C1->IFC = I2C_IFC_ACK;

      while(!(I2C1->IF & I2C_IF_RXDATAV));
      uint16_t low_byte = I2C1->RXDATA;
      I2C1->CMD =I2C_CMD_ACK;

      while(!(I2C1->IF & I2C_IF_RXDATAV));
      uint16_t high_byte = I2C1->RXDATA;
      I2C1->CMD =I2C_CMD_NACK;

      uint16_t Lux_value= high_byte<<8 | low_byte;

      I2C1->CMD = I2C_CMD_STOP;
      while((I2C1->IF & I2C_IF_MSTOP)==0);
      I2C1->IFC = I2C_IFC_MSTOP;

      if(Lux_value<((TLH<<8)|TLL))
   	    	GPIO_PinOutSet(LED_PORT,LED_LIGHT_PIN);
   	    if(Lux_value>((THH<<8)|THL))
            GPIO_PinOutClear(LED_PORT,LED_LIGHT_PIN);

   	    INT_Enable();

}


/*Callback routine to transfer data using DMA*/
void transferComplete(unsigned int channel, bool primary, void *user)
{
	unblockSleepMode(EM1);
	ADC0->CMD&=UF_Count;


	ADC0->CMD |=ADC_CMD_SINGLESTOP;//stopping ADC

   for (int i=0;i<ADCSAMPLES;i++)
      Sum=Sum+ramBufferAdcData[i];

            Average=Sum/ADCSAMPLES;
         	Sum = 0;
         	   Average = convertToCelsius(Average);

         		  if(Average>lowTempLimit && Average<highTempLimit)
         			 GPIO_PinOutClear(LED_PORT, LED_TEMP_PIN);
         		  else
         		      GPIO_PinOutSet(LED_PORT, LED_TEMP_PIN);

}



/****Clock Management Unit Setup*****/
void CMU_Setup()
{
	/**** enable ULFRCO for EM3 Mode******/
	    if(ENERGY_MODE==EM3)
	    {
	    	CMU_ClockSelectSet(cmuClock_LFA,cmuSelect_ULFRCO);
	        CMU_OscillatorEnable(cmuOsc_LFXO,true,true);
	    }
	    else
	    CMU_ClockSelectSet(cmuClock_LFA,cmuSelect_LFXO);

	    CMU_ClockEnable(cmuClock_ADC0, true);

	    CMU_ClockEnable(cmuClock_LETIMER0, false);
	    if(I2C_0_ACMP_1==1)
	    CMU_ClockEnable(cmuClock_ACMP0, true);

	    else if(I2C_0_ACMP_1==0)
	    {
	    	    CMU_ClockEnable(cmuClock_CORELE, true);
	    		CMU_ClockEnable(cmuClock_HFPER,true);
	    	    CMU_ClockEnable(cmuClock_I2C1, true);
	    	    CMU_ClockEnable(cmuClock_ACMP0, false);
	     }
	    if(DMA_STATUS==1)
	    CMU_ClockEnable(cmuClock_DMA, true);

}
void LETIMER0_Setup(void)
{
	float z;
	unsigned int Comp0;
	unsigned int Comp1;
	unsigned int LETIMER0_prescaler;
	if(ENERGY_MODE==EM3)
		Comp0 = Period*ULFRCOFreq*osc;
	else
	{
		LETIMER0_prescaler= Period/2;
		CMU->LFAPRESC0&= 0xfffff0ff;//clearing the prescaler register
		CMU->LFAPRESC0|= LETIMER0_prescaler << 8;//shift prescaler into position
		LETIMER0_prescaler = 1 << LETIMER0_prescaler ;//the value of prescaler register
		Comp0=Period*(LFXOFreq/LETIMER0_prescaler);// moving the final value to Comp0

	}
	if(ENERGY_MODE==EM3)
	{
		z = ON_DUTY_CYCLE*ULFRCOFreq*osc;

	if(z > (int)z)
	{
		Comp1=z+1;
	}
	}
		else
		{
			Comp1=ON_DUTY_CYCLE*(LFXOFreq/LETIMER0_prescaler);

		}

    /* Set initial compare values for COMP0 and Comp1 */
    LETIMER_CompareSet(LETIMER0, 0,Comp0);
    LETIMER_CompareSet(LETIMER0,1,Comp1);
    /* Set configurations for LETIMER 0 */
    const LETIMER_Init_TypeDef letimerInit =
    {
        .enable         = true,                   /* start counting when init completed - only with RTC compare match */
        .debugRun       = false,                  /* Counter shall not keep running during debug halt. */
        .rtcComp0Enable = false,                  /* DON'T Start counting on RTC COMP0 match. */
        .rtcComp1Enable = false,                  /* Don't start counting on RTC COMP1 match. */
        .comp0Top       = true,                  /* Load COMP0 register into CNT when counter underflows. COMP is used as TOP */
        .bufTop         = false,                  /* Don't load COMP1 into COMP0 when REP0 reaches 0. */
        .out0Pol        = 0,                      /* Idle value for output 0. */
        .out1Pol        = 0,                      /* Idle value for output 1. */
        .ufoa0          = letimerUFOANone,        /* Pulse output on output 0 */
        .ufoa1          = letimerUFOANone,        /* No output on output 1*/
        .repMode        = letimerRepeatFree,      /*Free mode*/
    };

    /* Initialize LETIMER */
    CMU_ClockEnable(cmuClock_LETIMER0, true);
    LETIMER_Init(LETIMER0, &letimerInit);
   /*****enabling interrupts for COmP1 and UF***/
    LETIMER_IntEnable(LETIMER0,LETIMER_IF_COMP1);
    LETIMER_IntEnable(LETIMER0, LETIMER_IF_UF);
    blockSleepMode(ENERGY_MODE);
    NVIC_EnableIRQ(LETIMER0_IRQn);//enabling interrupt table

}
/****GPIO setup***/
void GPIO_Setup()
{
	CMU_ClockEnable(cmuClock_GPIO, true);
	GPIO_PinModeSet(LED_PORT, LED_LIGHT_PIN, gpioModePushPull,0);
	GPIO_PinModeSet(LED_PORT, LED_TEMP_PIN, gpioModePushPull,0);

	if(I2C_0_ACMP_1==1)
	{
	GPIO_PinModeSet(LIGHT_EXCITE_PORT, LIGHT_EXCITE_PIN,gpioModePushPull,0);
	GPIO_PinModeSet(LIGHT_SENSE_PORT, LIGHT_SENSE_PIN,gpioModeDisabled,0);
	}

	if(I2C_0_ACMP_1==0)
	GPIO_PinModeSet(Power_Interrupt_Port,Power_Pin, gpioModePushPull,0);
}


/*ACMP Setup*/
void ACMP_Setup()

{
  const ACMP_Init_TypeDef ACMP0_init =
  {
    .fullBias = false,                              /* Full bias current*/
    .halfBias = false,                              /* Half bias current */
    .biasProg = 0x07,                                  /* Biasprog current configuration */
    .interruptOnFallingEdge = true,                               /* Enable interrupt for falling edge */
    .interruptOnRisingEdge = true,                               /* Enable interrupt for rising edge */
    .warmTime = acmpWarmTime256,                    /* Warm-up time in clock cycles, >140 cycles for 10us with 14MHz */
    .hysteresisLevel = acmpHysteresisLevel5,               /* Hysteresis configuration */
    .inactiveValue = 0,                                  /* Inactive comparator output value */
    .lowPowerReferenceEnabled = false,                              /* Enable low power mode */
    .vddLevel= LEVEL,                               /* Vdd reference scaling */
    .enable = true                               /* Enable ACMP */
  };
  CMU_ClockEnable(cmuClock_ACMP0, true);
  /* Init and set ACMP channels */
  ACMP_Init(ACMP0, &ACMP0_init);
  ACMP_ChannelSet(ACMP0,ACMP_NEG_CHANNEL,ACMP_POS_CHANNEL);
  while (!(ACMP0->STATUS & ACMP_STATUS_ACMPACT));//Warm-UP TIme
  }



/****LETMER Handler****/
void LETIMER0_IRQHandler(void)
{
	INT_Disable();
	int intFlags;
	intFlags = LETIMER0->IF;//the value of interrupt flag
	if((intFlags & LETIMER_IF_COMP1)!=0)                            //checking for COMP1 Interrupt
	{
		if(I2C_0_ACMP_1==1)
		GPIO_PinOutSet(LIGHT_EXCITE_PORT, LIGHT_EXCITE_PIN);//Enabling Excite Pin to read ACMP output at UF interrupt
		LETIMER0->IFC=intFlags;//clearing Interrupts
		ACMP_Setup();//Setting up ACMP since it was disabled in UF interrupt
	}
	if((intFlags&LETIMER_IF_UF)!=0)                                 // Checking for UF interrupt
	{
		LETIMER0->IFC=intFlags;                  //clearing Interrupt Flags
       if(I2C_0_ACMP_1==1)                   //checking if ACMP is ON and the external sensor is OFF
        {
		  if((ACMP0->STATUS & ACMP_STATUS_ACMPOUT))  //checking ACMP output
		  {
		     if(LEVEL==61)                          //checking higher threshold
		     {
		       GPIO_PinOutClear(LED_PORT,LED_LIGHT_PIN);  //clearing LED if beyond the higher threshold
		       ACMP_Disable(ACMP0);       //Disabling ACMP to save energy

		        LEVEL = 2;             //toggling to the lower threshold

		      }
		     }
		   else
		   {
		       if(LEVEL== 2)
		       {
		        GPIO_PinOutSet(LED_PORT,LED_LIGHT_PIN);  //Enabling LED if lower than lower threshold
                 ACMP_Disable(ACMP0);      //Disabling ACMP to save energy
		         LEVEL = 61;              //toggling to the higher threshold

		       	}
		     }
		    GPIO_PinOutClear(LIGHT_EXCITE_PORT, LIGHT_EXCITE_PIN);   //Disabling the excite pin to save energy
}
else if(I2C_0_ACMP_1==0)   //checking if ACMP is off and the external sensor is ON
{
	if(LETIMER_Period==1)//PERIOD 1
	{
		LETIMER_Period++;
		TSL2561_Setup();  //Enabling slave
     }
	else if(LETIMER_Period==2)//monitoring the interrupts in PERIOD 2
         LETIMER_Period++;

	else //disabling the slave in PERIOD 3
	{
		GPIO->IEN=0x0;
        GPIO_PinOutClear(Power_Interrupt_Port,Power_Pin);//Power off the slave
		LETIMER_Period=1;
		unblockSleepMode(EM1);
		blockSleepMode(EM3);
      }
   }
    setupAdc();   //setting up ADC
    blockSleepMode(EM1);
	if(DMA_STATUS==1)
        DMA_ActivateBasic(DMA_CHANNEL_ADC,
		                  true,
		                  false,
		                  (void *)ramBufferAdcData,
		                  (void *)&(ADC0->SINGLEDATA),
		                  ADCSAMPLES - 1);

     if(DMA_STATUS==0)          //Enabling ADC interrupts if DMA is off
     {
       ADC_IntEnable(ADC0,ADC_IEN_SINGLE);
	   NVIC_EnableIRQ(ADC0_IRQn);
	 }
	   ADC_Start(ADC0, adcStartSingle);  //Starting ADC
}
INT_Enable();
}



/*Sleep routine taken from SILICON LABS*/
void sleep(void)
{
	if (sleep_block_counter[0] > 0)
	{
		return; // Blocked everything below EM0, so just return
	}
	else if(sleep_block_counter[1] > 0)
	{
	    EMU_EnterEM1(); // Blocked everything below EM1, enter EM1

	}
	else if(sleep_block_counter[2] > 0)
	{
		EMU_EnterEM2(true); //Blocked everything below EM2, enter EM2

	}
	else if(sleep_block_counter[3]>0)
	{
		EMU_EnterEM3(true); //Blocked everything below EM3, enter EM3

	}
	else
    return;
}


/***Block Sleep Mode routine taken from SILICON LABS**/
void blockSleepMode(sleepstate_enum minimumMode)
{
	INT_Disable();
	sleep_block_counter[minimumMode]++;
	INT_Enable();
}

/*UNblock Sleep Routine taken from SILICON LABS**/
void unblockSleepMode(sleepstate_enum minimumMode)
{
	INT_Disable();
	if(sleep_block_counter[minimumMode]>0)
	sleep_block_counter[minimumMode]--;
	else
		sleep_block_counter[minimumMode]=0;
	INT_Enable();
}


/*Calibration routine to find oscillation ratio at EM3*/
void calib_ultra(void)
{
	INT_Disable();
	int Flags;
	uint32_t timer1_count;
	uint32_t timer0_count;

	uint32_t LFXOCOUNT=UF_Count;
	uint32_t ULFRCOCOUNT=UF_Count;



	CMU_OscillatorEnable(cmuOsc_LFXO,true,true);

    CMU_ClockEnable(cmuClock_CORELE, true); /* Enable CORELE clock */
    CMU_ClockSelectSet(cmuClock_LFA,cmuSelect_LFXO); /* Select LFXO as clock source for LFA for EM0 to EM2 */


    /* Select TIMER0 parameters */
		  TIMER_Init_TypeDef timer0Init =
		  {
		    .enable     = false,
		    .debugRun   = true,
		    .prescale   = timerPrescale1,
		    .clkSel     = timerClkSelHFPerClk,
		    .fallAction = timerInputActionNone,
		    .riseAction = timerInputActionNone,
		    .mode       = timerModeUp,
		    .dmaClrAct  = false,
		    .quadModeX4 = false,
		    .oneShot    = false,
		    .sync       = false,
		  };


		  /* Select TIMER1 parameters */
		  	  TIMER_Init_TypeDef timer1Init =
		  	  {
		  	    .enable     = false,
		  	    .debugRun   = true,
		  	    .prescale   = timerPrescale1,
		  	    .clkSel     = timerClkSelCascade,
		  	    .fallAction = timerInputActionNone,
		  	    .riseAction = timerInputActionNone,
		  	    .mode       = timerModeUp,
		  	    .dmaClrAct  = false,
		  	    .quadModeX4 = false,
		  	    .oneShot    = false,
		  	    .sync       = true,
		  	  };


		  //Clear all timer0 and timer1 interrupts

		  int  IntFlags1=TIMER1->IF;
		  TIMER1->IFC=IntFlags1;
		  int  IntFlags0=TIMER0->IF;
		  		  TIMER0->IFC=IntFlags0;




		  /* Enable TIMER0 and TIMER1 interrupt vector in NVIC */
		  NVIC_EnableIRQ(TIMER0_IRQn);
		  NVIC_EnableIRQ(TIMER1_IRQn);


	/* Set configurations for LETIMER 0 */
		const LETIMER_Init_TypeDef letimerInit =
		{
		.enable = false, /* Start counting when init completed*/
		.debugRun = false, /* Counter shall not keep running during debug halt. */
		.rtcComp0Enable = false, /* Start counting on RTC COMP0 match. */
		.rtcComp1Enable = false, /* Don't start counting on RTC COMP1 match. */
		.comp0Top = true, /* Load COMP0 register into CNT when counter underflows. COMP is used as TOP */
		.bufTop = false, /* Don't load COMP1 into COMP0 when REP0 reaches 0. */
		.out0Pol = 0, /* Idle value for output 0. */
		.out1Pol = 0, /* Idle value for output 1. */
		.ufoa0 = letimerUFOANone, /* PwM output on output 0 */
		.ufoa1 = letimerUFOANone, /* No output on output 1*/
		.repMode = letimerRepeatFree /* Count while REP != 0 */
		};

       //set LED on time
		LETIMER0->CNT=32769; // set count for 1s
		TIMER0->CNT=UF_Count;  //Set Timer0 initial count to 0
		TIMER1->CNT=UF_Count;  //Set Timer1 initial count to 0



		//Clear all interrupts
		        Flags=LETIMER0->IF;
		        LETIMER0->IFC=Flags;


          /* Enable LETIMER0 interrupt vector in NVIC*/
		NVIC_EnableIRQ(LETIMER0_IRQn);

		//Enable clock for timers
		CMU_ClockEnable(cmuClock_LETIMER0, true); /*Enable clock for LETIMER0*/
		CMU_ClockEnable(cmuClock_TIMER0, true); /*Enable clock for TIMER0*/
		CMU_ClockEnable(cmuClock_TIMER1, true); /*Enable clock for TIMER0*/

	   /* Configure TIMER0,TIMER1 and LETIMER0 */
		LETIMER_Init(LETIMER0, &letimerInit);
		TIMER_Init(TIMER0, &timer0Init);
		TIMER_Init(TIMER1, &timer1Init);

		//enable timers to start count
        LETIMER_Enable(LETIMER0, true);
        TIMER_Enable(TIMER0, true);
        TIMER_Enable(TIMER1, true);


        while(LETIMER0->CNT!=UF_Count);//Polling till LETIMER Underflows

        //Disable timers when LETIMER0 underflows
        LETIMER_Enable(LETIMER0, false);
        TIMER_Enable(TIMER0, false);
        TIMER_Enable(TIMER1, false);

        //Load timer 0 and 1 counts
        timer1_count=TIMER1->CNT;
        timer0_count=TIMER0->CNT;

        LFXOCOUNT=((timer1_count << 16)|(timer0_count)); //LFXO Count is determined

        TIMER0->CNT=UF_Count;
        TIMER1->CNT=UF_Count;

        //Set necessary clocks for ULFRCO
          CMU_ClockSelectSet(cmuClock_LFA,cmuSelect_ULFRCO);
          CMU_OscillatorEnable(cmuOsc_LFXO,false,false);

          //Enable clock for timers
          CMU_ClockEnable(cmuClock_LETIMER0, true); /*Enable LETIMER0*/
          CMU_ClockEnable(cmuClock_TIMER0, true); /*Enable  TIMER0*/
          CMU_ClockEnable(cmuClock_TIMER1, true); /*Enable TIMER1*/

       LETIMER_Init(LETIMER0, &letimerInit);
       LETIMER0->CNT=ULFRCOFreq;                   //count for 1s in ULFRCO

       LETIMER_Enable(LETIMER0, true);

       TIMER_Enable(TIMER1, true);
       TIMER_Enable(TIMER0, true);

       while(LETIMER0->CNT!=UF_Count);//Polling till LETIMER Underflows


       TIMER_Enable(TIMER1, false);
       TIMER_Enable(TIMER0, false);

       LETIMER_Enable(LETIMER0, false);

        timer1_count=TIMER1->CNT;
        timer0_count=TIMER0->CNT;

        //Save 32 bit ULFRCO count value in after cascading timer 0 and Timer 1
        ULFRCOCOUNT=((timer1_count << 16)|(timer0_count));

      osc=(float)LFXOCOUNT/ULFRCOCOUNT; //oscillation ratio is found
      INT_Enable();
}


/*SEtting up ADC*/
void setupAdc(void)
{
  ADC_Init_TypeDef        adcInit       = ADC_INIT_DEFAULT;
  ADC_InitSingle_TypeDef  singleInit = ADC_INITSINGLE_DEFAULT;
  adcInit.prescale = ADC_PrescaleCalc(ADC_Prescale, 0); /* Set prescaler for sampling of 10,000 samples per second */
  ADC_Init(ADC0, &adcInit);

  singleInit.resolution = ADC0_resolution;
  singleInit.acqTime = ADC0_acq_time;
  singleInit.reference  = ADC0_reference;
  singleInit.input     =  ADC0_channel;  /* Reference */
  singleInit.leftAdjust = false;
  singleInit.rep=true;
  singleInit.prsEnable = ADC0_rep;
  singleInit.prsSel    = ADC0_PRS_SELECTION;           /* Triggered by PRS CH0 */
  ADC_InitSingle(ADC0, &singleInit);
}


/*DMA Setup*/
void setupDma(void)
{
  DMA_Init_TypeDef        dmaInit;
  DMA_CfgChannel_TypeDef  chnlCfg;
  DMA_CfgDescr_TypeDef    descrCfg;

  /* Initializing the DMA */
  dmaInit.hprot        = 0;
  dmaInit.controlBlock = dmaControlBlock;
  DMA_Init(&dmaInit);

  /* Setting up call-back function */
  cb.cbFunc  = transferComplete;
  cb.userPtr = NULL;

  /* Setting up channel */
  chnlCfg.highPri   = false;
  chnlCfg.enableInt = true;
  chnlCfg.select    = DMAREQ_ADC0_SINGLE;
  chnlCfg.cb        = &cb;
  DMA_CfgChannel(DMA_CHANNEL_ADC, &chnlCfg);

  /* Setting up channel descriptor */
  descrCfg.dstInc  = dmaDataInc2;
  descrCfg.srcInc  = dmaDataIncNone;
  descrCfg.size    = dmaDataSize2;
  descrCfg.arbRate = dmaArbitrate1;
  descrCfg.hprot   = 0;
  DMA_CfgDescr(DMA_CHANNEL_ADC, true, &descrCfg);
}

/*ADC Interrupt Handler which gets invoked after every sample when DMA is off*/
void ADC0_IRQHandler(void)
{
	INT_Disable();
	int flag=ADC0->IF;
	ADC0->IFC=flag;

    float temp=0.0;
	uint32_t sum=0;
    float avg=0.0;

    /*Storing all the samples in the buffer array*/
    if(Buffer_Count<ADCSAMPLES)
    {
    	ramBufferAdcData[Buffer_Count]= ADC0->SINGLEDATA;
        Buffer_Count++;
    }
    /*Calculating the temperature using the samples and turning LED1 ON/OFF*/
    else
    	{
    	ADC0->CMD |=ADC_CMD_SINGLESTOP;
    	for(Buffer_Count=0;Buffer_Count<ADCSAMPLES;Buffer_Count++)
    	sum=sum+ramBufferAdcData[Buffer_Count];
    	avg=sum/ADCSAMPLES;
    	Buffer_Count=0;

    	unblockSleepMode(EM1);

    temp=convertToCelsius(avg);
    if(temp>=lowTempLimit && temp<=highTempLimit)//turning LED1 ON/OFF according to the temperature calculated
    	GPIO_PinOutClear(LED_PORT, LED_TEMP_PIN);
    else
    	GPIO_PinOutSet(LED_PORT, LED_TEMP_PIN);
    }

    INT_Enable();
}


/**Routine to transfer values into the slave register addresses**/
void i2c_Transfer(uint8_t address,uint8_t data)
{
	uint8_t add = address;
	    uint8_t value = data;



		I2C1->TXDATA=(TSL_addr<<1)|Write;   //Write operation
		for(int i=0;i<500;i++);
		I2C1->CMD = I2C_CMD_START;
		while(!(I2C1->IF & I2C_IF_ACK));
		I2C1->IFC = I2C_IFC_ACK;

		I2C1->TXDATA = (CMD_Byte|add);     //Sending address of the register
		while(!(I2C1->IF & I2C_IF_ACK));
	    I2C1->IFC = I2C_IFC_ACK;

	    I2C1->TXDATA = value;              //Sending value into the register
	    while(!(I2C1->IF & I2C_IF_ACK));
	    I2C1->IFC = I2C_IFC_ACK;

	    I2C1->CMD = I2C_CMD_STOP;
	    while((I2C1->IF & I2C_IF_MSTOP)==0);
	    I2C1->IFC = I2C_IFC_MSTOP;
}


/*Setting up the slave/External Sensor*/
void TSL2561_Setup()
{

	GPIO_PinOutSet(Power_Interrupt_Port,Power_Pin);//Providing Power to the slave
	for(int i=0;i<500;i++);
	i2c_Transfer(I2C_CTRL_ADD,POWER);    //Control Register
	i2c_Transfer(I2C_TIMING_ADD,TIMING);  //Timing Register
	i2c_Transfer(I2C_TLL_ADD,TLL);      //Lower Threshold Lower Byte
	i2c_Transfer(I2C_TLH_ADD,TLH);      //Lower Threshold Higher Byte
	i2c_Transfer(I2C_THL_ADD,THL);      //Higher Threshold Lower Byte
	i2c_Transfer(I2C_THH_ADD,THH);      //Higher Threshold Higher Byte
	i2c_Transfer(I2C_INT_ADD,((INTR_FIELD<<4)|PERSIST));   //Persistence with interrupt field

	 GPIO_PinModeSet(Power_Interrupt_Port, Interrupt_Pin , gpioModeInput, 1);//Interrupt Pin is setup
     GPIO_ExtIntConfig(Power_Interrupt_Port, Interrupt_Pin , 1,false, true, true);//External Interrupt is enabled
	 NVIC_EnableIRQ(GPIO_ODD_IRQn);


}

/**Routine to setup the I2C bus**/
void setupI2C(void)
{
	I2C_Init_TypeDef i2cInit =
		{
	     .enable   = true,
		 .master   = true,
		 .refFreq  = 0,
		 .freq     = I2C_FREQ_STANDARD_MAX,
		 .clhr     = i2cClockHLRStandard,
		};
	GPIO_PinModeSet(Clock_Data_Port, SCL_Pin, gpioModeWiredAndPullUpFilter, 1);
	  GPIO_PinModeSet(Clock_Data_Port, SDA_Pin, gpioModeWiredAndPullUpFilter, 1);
	  I2C1->ROUTE = I2C_ROUTE_SDAPEN |
	                  I2C_ROUTE_SCLPEN |
	                  (0 << _I2C_ROUTE_LOCATION_SHIFT);
	  I2C_Init(I2C1, &i2cInit);
	  if(I2C1->STATE&I2C_STATE_BUSY)
	  {
		  I2C1->CMD=I2C_CMD_ABORT;
	  }
	  for (int i = 9; i > 0; i--)           //flushing out the previous data on the I2C bus
	    {

	      GPIO_PinModeSet(Clock_Data_Port, SCL_Pin, gpioModeWiredAnd, 0);
	      GPIO_PinModeSet(Clock_Data_Port, SCL_Pin, gpioModeWiredAnd, 1);
	    }

	  /***enable interrupts***/
	 I2C1->IEN|=I2C_IEN_ACK;
	I2C1->IEN|=I2C_IEN_NACK;
	I2C1->IEN|=I2C_IEN_RXDATAV;
	for(int i=0;i<50;i++);
}

/****main function****/
int main(void)
{
    /* Align different chip revisions */
     CHIP_Init();
     if(CALIB_ON==1)  //if calibration option is chosen, calibration routine is called
	calib_ultra();

     CMU_Setup();
    GPIO_Setup();

    if(I2C_0_ACMP_1==1)         //if the sensor on board is chosen, the ACMP setup is done
    ACMP_Setup();

    else if(I2C_0_ACMP_1==0)     //if the external sensor is chosen, the I2C bus is set up
    	setupI2C();

    if(DMA_STATUS==1)          //if DMA option is chosen, DMA setup is done
    setupDma();

    LETIMER0_Setup();

    while(1)
      {

        	sleep();

      }
}
